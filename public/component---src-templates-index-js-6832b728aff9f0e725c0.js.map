{"version":3,"sources":["webpack:///./src/templates/index.js"],"names":["Index","data","location","pageContext","posts","allGhostPost","edges","isHome","className","map","node","key","id","post","pageQuery"],"mappings":"2FAAA,8GA6CeA,UArCD,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YACvBC,EAAQH,EAAKI,aAAaC,MAEhC,OACI,oCACI,kBAAC,IAAD,CAAUJ,SAAUA,IACpB,kBAAC,IAAD,CAAQK,QAAQ,GACZ,yBAAKC,UAAU,aACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,qBACX,6BAASA,UAAU,aACdJ,EAAMK,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACP,kBAAC,IAAD,CAAUC,IAAKD,EAAKE,GAAIC,KAAMH,QAGtC,kBAAC,IAAD,CAAYP,YAAaA,KAE7B,yBAAKK,UAAU,qBACX,kBAAC,IAAD,YAqBrB,IAAMM,EAAS","file":"component---src-templates-index-js-6832b728aff9f0e725c0.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport { Layout, PostCard, Pagination } from '../components/common'\nimport { MetaData } from '../components/common/meta'\nimport Hero from '../components/common/Hero'\n\nconst Index = ({ data, location, pageContext }) => {\n    const posts = data.allGhostPost.edges\n\n    return (\n        <>\n            <MetaData location={location} />\n            <Layout isHome={true}>\n                <div className=\"container\">\n                    <div className=\"container_blocks\">\n                        <div className=\"container_content\">\n                            <section className=\"post-feed\">\n                                {posts.map(({ node }) => (\n                                    <PostCard key={node.id} post={node} />\n                                ))}\n                            </section>\n                            <Pagination pageContext={pageContext} />\n                        </div>\n                        <div className=\"container_sidebar\">\n                            <Hero />\n                        </div>\n                    </div>\n                </div>\n            </Layout>\n        </>\n    )\n}\n\nIndex.propTypes = {\n    data: PropTypes.shape({\n        allGhostPost: PropTypes.object.isRequired,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    pageContext: PropTypes.object,\n}\n\nexport default Index\n\nexport const pageQuery = graphql`\n  query GhostPostQuery($limit: Int!, $skip: Int!) {\n    allGhostPost(\n        sort: { order: DESC, fields: [published_at] },\n        limit: $limit,\n        skip: $skip\n    ) {\n      edges {\n        node {\n          ...GhostPostFields\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}